doctype html
html(lang="en")
  head
    meta(charset="UTF-8")
    meta(name="viewport", content="width=device-width, initial-scale=1.0")
    title= title
    link(rel="stylesheet", href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css")
    link(rel="stylesheet", href="/style.css")
    link(rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css")
    script(src='/script.js')
  body
    .container    
      header
        h1(id="titleInput")= checklist.title 
        input(type='hidden', id='draftId', value=checklist._id)

      each category in checklist.categories
        section
          h3= category.category_name
          ul
            each question in category.questions
              li.question-area(data-category=category.category_name)
                p.question-text(id=question.question_id + 'question_text')= question.question_id + '. ' + question.question_text
                
                if question.response
                  select.answer-dropdown(id=question.question_id + 'answer_dropdown')
                    option(value="confirm", selected=question.response.answer === 'confirm') Confirm
                    option(value="not_confirm", selected=question.response.answer === 'not_confirm') Not Confirm
                  
                  i.fas.fa-comment-alt.comment-icon(data-target=question.question_id + 'comments')
                  
                  textarea.comment-textarea(id=question.question_id + 'comments', style=question.response.comments ? '' : 'display: none;')= question.response.comments
                else
                  select.answer-dropdown
                    option(value="confirm") Confirm
                    option(value="not_confirm") Not Confirm
                  
                  i.fas.fa-comment-alt.comment-icon(data-target=question.question_id + 'comments')
                  
                  textarea.comment-textarea(id=question.question_id + 'comments', style='display: none;')

      .button-group
        button(type='button', onclick='handleUpdate()') Update Draft
        button(type='button', onclick='handleComplete()') Mark as Completed
        button(type='button', onclick='handleCancel()') Cancel

script.
  

  function collectData() {
    const questionsData = [];
    document.querySelectorAll('.question-area').forEach(question => {
        const questionId = question.querySelector('.question-text').id;
        
        const answerDropdown = question.querySelector('.answer-dropdown');
        if (!answerDropdown) {
            console.error('Answer dropdown not found for question:', questionId);
            return; // Skip this question if the dropdown is not found
        }
        
        const commentsTextarea = question.querySelector('.comment-textarea');
        if (!commentsTextarea) {
            console.error('Comments textarea not found for question:', questionId);
            return; // Skip this question if the textarea is not found
        }
        
        questionsData.push({
            question_id: questionId,
            answer: answerDropdown.value, // getting the selected value from the dropdown
            comments: commentsTextarea.value
        });
    });
    
    return questionsData;
  }
  function handleUpdate() {
    const data = collectData(); // This function should return the updated draft data
    sendDataToServer(data);
  }

  function sendDataToServer(rawData) {
  const draftId = document.getElementById('draftId').value;
  
  // Transform data into the required structure
  const checklistAnswers = rawData.reduce((acc, item) => {
    // Assuming category can be derived from question_id like "1.1" where "1" would be the category
    const category = item.question_id.split('.')[0];
    const categoryName = "Category " + category; // You need to replace this with actual category name mapping if necessary
    
    // Initialize the category array if not already present
    if (!acc[categoryName]) {
      acc[categoryName] = [];
    }
    
    // Add the question to the appropriate category
    acc[categoryName].push({
      questionId: item.question_id.replace('question_text', ''),
      questionText: document.getElementById(item.question_id).innerText,
      answer: item.answer,
      comments: item.comments,
      currentUser: "Username" // Replace with actual username if needed
    });

    return acc;
  }, {});

  const dataToSend = {
    checklistAnswers: checklistAnswers,
    currentUser: "Username" // Replace with actual username if needed
  };

  console.log('Transformed data:', JSON.stringify(dataToSend));
  
  fetch('/api/update-checklist/' + encodeURIComponent(draftId), {
    method: 'POST',
    headers: {
        'Content-Type': 'application/json'
    },
    body: JSON.stringify(dataToSend)
  })
  .then(response => {
      if (!response.ok) {
          throw new Error('Network response was not ok ' + response.statusText);
      }
      return response.json();
  })
  .then(data => {
      console.log('Checklist updated successfully!', data);
      // Redirect or handle the UI update here after successful operation
  })
  .catch(error => {
      console.error('Error:', error);
  });
  }






